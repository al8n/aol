name: CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README'
      - 'COPYRIGHT'
      - 'LICENSE-*'
      - '**.md'
      - '**.txt'
  pull_request:
    paths-ignore:
      - 'README'
      - 'COPYRIGHT'
      - 'LICENSE-*'
      - '**.md'
      - '**.txt'

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -Dwarnings
  RUST_BACKTRACE: 1
  nightly: nightly
  stable: stable

jobs:
  # Check formatting
  rustfmt:
    name: rustfmt
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      # --no-self-update is necessary because the windows environment cannot self-update rustup.exe.
      run: rustup update stable --no-self-update && rustup default stable
    - name: Check formatting
      run: cargo fmt --all -- --check


  # Apply clippy lints
  clippy:
    name: clippy
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      # --no-self-update is necessary because the windows environment cannot self-update rustup.exe.
      run: rustup update stable --no-self-update && rustup default stable
    - name: Install cargo-hack
      run: cargo install cargo-hack
    - name: Apply clippy lints
      run: cargo hack clippy --each-feature --exclude-no-default-features --exclude-features xxhash64,xxhash3,tracing

  build:
    name: build
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Cache cargo build and registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-build-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-build-
    - name: Install Rust
      # --no-self-update is necessary because the windows environment cannot self-update rustup.exe.
      run: rustup update stable --no-self-update && rustup default stable
    - name: Install cargo-hack
      run: cargo install cargo-hack
    - name: Cache ~/.cargo
      uses: actions/cache@v3
      with:
        path: ~/.cargo
        key: ${{ runner.os }}-coverage-dotcargo
    - name: Run build
      run: cargo hack build --each-feature --exclude-no-default-features --exclude-features xxhash64,xxhash3,tracing
  
  test:
    name: test
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Cache cargo build and registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-test-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-test-
    - name: Install Rust
      # --no-self-update is necessary because the windows environment cannot self-update rustup.exe.
      run: rustup update stable --no-self-update && rustup default stable
    - name: Install cargo-hack
      run: cargo install cargo-hack
    - name: Cache ~/.cargo
      uses: actions/cache@v3
      with:
        path: ~/.cargo
        key: ${{ runner.os }}-coverage-dotcargo
    - name: Run test
      run: cargo hack test --each-feature --exclude-no-default-features --exclude-features xxhash64,xxhash3,tracing

  sanitizer:
    name: sanitizer
    strategy:
      matrix:
        os:
          - ubuntu-latest
          # - macos-latest
          # - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo build and registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-sanitizer-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-sanitizer-
      - name: Install Rust
        run: rustup update $nightly && rustup default $nightly
      - name: Install rust-src
        run: rustup component add rust-src
      - name: ASAN / LSAN / MSAN (Linux)
        run: ci/sanitizer.sh

  miri-tb:
    name: miri-tb
    strategy:
      matrix:
        os:
          - ubuntu-latest
          # - macos-latest
          # - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo build and registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-miri-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-miri-
      - name: Install cargo-hack
        run: cargo install cargo-hack
      - name: Miri (Linux)
        run: ci/miri_tb.sh

  miri-sb:
    name: miri-sb
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          # - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo build and registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-miri-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-miri-
      - name: Install cargo-hack
        run: cargo install cargo-hack
      - name: Miri (Linux)
        run: ci/miri_sb.sh

  # valgrind
  valgrind:
    name: valgrind
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo build and registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ubuntu-latest-valgrind-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ubuntu-latest-valgrind-

      - name: Install Rust ${{ env.stable }}
        uses: actions-rs/toolchain@v1
        with:
            toolchain: ${{ env.stable }}
            override: true
      - name: Install Valgrind
        run: |
          sudo apt-get update -y
          sudo apt-get install -y valgrind
      # Compile tests
      - name: build integration
        run: AOL_GITHUB_CI_VALGRIND=true cargo build --release
        working-directory: integration

      # Run with valgrind
      - name: Run valgrind foo
        run: valgrind --error-exitcode=1 --leak-check=full --show-leak-kinds=all ./target/release/integration
        working-directory: integration

  coverage:
    name: coverage
    runs-on: ubuntu-latest
    needs:
      - sanitizer
      - build
      - valgrind
      - test
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo build and registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ubuntu-latest-coverage-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ubuntu-latest-coverage- 
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-coverage-cargo-build-target
      - name: Install Rust
        run: rustup update $nightly && rustup default $nightly
      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin
      - name: Run tarpaulin
        run: AOL_GITHUB_CI=true cargo tarpaulin --run-types Tests --run-types Doctests --run-types Examples --all-features --out Xml --workspace
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: ${{ github.repository }}
          fail_ci_if_error: true
